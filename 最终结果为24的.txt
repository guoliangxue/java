/**
 * @filename Test.java
 * @author xgl
 * @date 2019年4月30日 下午8:36:47
 * @version 1.0
 * Copyright (C) 2019 
 */

package pkbao;

public class Test {
	// 声明4个数组A B C D
	static int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
	static int b[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
	static int c[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
	static int d[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
	// 随机出来的4个数存放
	// static ArrayList<Object> al=new ArrayList<>();
	static int m[] = new int[4];
	static String n[] = new String[4];
	// 存放操作符
	static char[] symbol = { '+', '-', '*', '/' };
	// 用来判断是否有解
	static boolean flag = false;

	/*static void jisuan(int a, int b, int c, int d) {

	}*/

	public static void main(String[] args) {
		// 随机数乘以数组长度，那么它的取值就在0-length之间
		int num1 = (int) (Math.random() * a.length + 1);
		int num2 = (int) (Math.random() * b.length + 1);
		int num3 = (int) (Math.random() * c.length + 1);
		int num4 = (int) (Math.random() * d.length + 1);
		jisuan(num1, num2, num3, num4);

		/*
		 * al.add(num1); al.add(num2); al.add(num3); al.add(num4);
		 * System.out.println(al.size()); for(Object als:al){
		 * System.out.println(als); }
		 */

	}

	// 给定2个数和指定操作符的计算
	public static int calcute(int count1, int count2, char symbol) {
		if (symbol == '+') {
			return count1 + count2;
		} else if (symbol == '-') {
			return count1 - count2;
		} else if (symbol == '*') {
			return count1 * count2;
		} else if ((symbol == '/') && (count2 != 0) && (count1 % count2 == 0)) {
			return count1 / count2;
		} else {
			return -1;
		}
	}

	public static void jisuan(int num1, int num2, int num3, int num4) {
		for (int i = 0; i < 4; i++) {
			// 第1次计算，先从四个数中任意选择两个进行计算
			char symbol1 = symbol[i];
			int firstResult = calcute(num1, num2, symbol1);// 先选第一，和第二个数进行计算
			int midResult = calcute(num2, num3, symbol1);// 先选第二和第三两个数进行计算
			int tailResult = calcute(num3, num4, symbol1);// 先选第三和第四俩个数进行计算
			for (int j = 0; j < 4; j++) {
				// 第2次计算，从上次计算的结果继续执行，这次从三个数中选择两个进行计算
				char symbol2 = symbol[j];
				int firstMidResult = calcute(firstResult, num3, symbol2);
				int firstTailResult = calcute(num3, num4, symbol2);
				int midFirstResult = calcute(num1, midResult, symbol2);
				int midTailResult = calcute(midResult, num4, symbol2);
				int tailMidResult = calcute(num2, tailResult, symbol2);
				for (int k = 0; k < 4; k++) {
					// 第3次计算，也是最后1次计算，计算两个数的结果，如果是24则输出表达式
					char symbol3 = symbol[k];
					/*在以上的计算中num1，num2,num3,num4都是整型数值，
					但若要输出为带有A,J,Q,K的表达式，则要将这四个表达式变为String类型，下同*/
					if (calcute(firstMidResult, num4, symbol3) == 24) {
						m[0] = num1;
						m[1] = num2;
						m[2] = num3;
						m[3] = num4;
						for (int p = 0; p < 4; p++) {
							if (m[p] == 1) {
								n[p] = "1";
							}
							if (m[p] == 2) {
								n[p] = "2";
							}
							if (m[p] == 3) {
								n[p] = "3";
							}
							if (m[p] == 4) {
								n[p] = "4";
							}
							if (m[p] == 5) {
								n[p] = "5";
							}
							if (m[p] == 6) {
								n[p] = "6";
							}
							if (m[p] == 7) {
								n[p] = "7";
							}
							if (m[p] == 8) {
								n[p] = "8";
							}
							if (m[p] == 9) {
								n[p] = "9";
							}
							if (m[p] == 10) {
								n[p] = "10";
							}
							if (m[p] == 11) {
								n[p] = "11";
							}
							if (m[p] == 12) {
								n[p] = "12";
							}
							if (m[p] == 13) {
								n[p] = "13";
							}
						}
						System.out.println("((" + n[0] + symbol1 + n[1] + ")"
								+ symbol2 + n[2] + ")" + symbol3 + n[3]);
						flag = true;// 若有表达式输出，则将说明有解，下同
					}
					if (calcute(firstResult, firstTailResult, symbol3) == 24) {
						System.out.println("(" + n[0] + symbol1 + n[1] + ")"
								+ symbol3 + "(" + n[2] + symbol2 + n[3] + ")");
						flag = true;
					}
					if (calcute(midFirstResult, num4, symbol3) == 24) {
						m[0] = num1;
						m[1] = num2;
						m[2] = num3;
						m[3] = num4;
						for (int p = 0; p < 4; p++) {
							if (m[p] == 1) {
								n[p] = "1";
							}
							if (m[p] == 2) {
								n[p] = "2";
							}
							if (m[p] == 3) {
								n[p] = "3";
							}
							if (m[p] == 4) {
								n[p] = "4";
							}
							if (m[p] == 5) {
								n[p] = "5";
							}
							if (m[p] == 6) {
								n[p] = "6";
							}
							if (m[p] == 7) {
								n[p] = "7";
							}
							if (m[p] == 8) {
								n[p] = "8";
							}
							if (m[p] == 9) {
								n[p] = "9";
							}
							if (m[p] == 10) {
								n[p] = "10";
							}
							if (m[p] == 11) {
								n[p] = "11";
							}
							if (m[p] == 12) {
								n[p] = "12";
							}
							if (m[p] == 13) {
								n[p] = "13";
							}
						}
						System.out.println("(" + n[0] + symbol2 + "(" + n[1]
								+ symbol1 + n[2] + "))" + symbol3 + n[3]);
						flag = true;
					}
					if (calcute(num1, midTailResult, symbol3) == 24) {
						m[0] = num1;
						m[1] = num2;
						m[2] = num3;
						m[3] = num4;
						for (int p = 0; p < 4; p++) {
							if (m[p] == 1) {
								n[p] = "1";
							}
							if (m[p] == 2) {
								n[p] = "2";
							}
							if (m[p] == 3) {
								n[p] = "3";
							}
							if (m[p] == 4) {
								n[p] = "4";
							}
							if (m[p] == 5) {
								n[p] = "5";
							}
							if (m[p] == 6) {
								n[p] = "6";
							}
							if (m[p] == 7) {
								n[p] = "7";
							}
							if (m[p] == 8) {
								n[p] = "8";
							}
							if (m[p] == 9) {
								n[p] = "9";
							}
							if (m[p] == 10) {
								n[p] = "10";
							}
							if (m[p] == 11) {
								n[p] = "11";
							}
							if (m[p] == 12) {
								n[p] = "12";
							}
							if (m[p] == 13) {
								n[p] = "13";
							}
						}
						System.out.println(" " + n[0] + symbol3 + "((" + n[1]
								+ symbol1 + n[2] + ")" + symbol2 + n[3] + ")");
						flag = true;
					}

					if (calcute(num1, tailMidResult, symbol3) == 24) {
						m[0] = num1;
						m[1] = num2;
						m[2] = num3;
						m[3] = num4;
						for (int p = 0; p < 4; p++) {
							if (m[p] == 1) {
								n[p] = "1";
							}
							if (m[p] == 2) {
								n[p] = "2";
							}
							if (m[p] == 3) {
								n[p] = "3";
							}
							if (m[p] == 4) {
								n[p] = "4";
							}
							if (m[p] == 5) {
								n[p] = "5";
							}
							if (m[p] == 6) {
								n[p] = "6";
							}
							if (m[p] == 7) {
								n[p] = "7";
							}
							if (m[p] == 8) {
								n[p] = "8";
							}
							if (m[p] == 9) {
								n[p] = "9";
							}
							if (m[p] == 10) {
								n[p] = "10";
							}
							if (m[p] == 11) {
								n[p] = "11";
							}
							if (m[p] == 12) {
								n[p] = "12";
							}
							if (m[p] == 13) {
								n[p] = "13";
							}
						}
						System.out.println(" " + n[0] + symbol3 + "(" + n[1]
								+ symbol2 + "(" + n[2] + symbol1 + n[3] + "))");
						flag = true;
					}
				}
			}
		}
	}

}
